from fastapi import FastAPI
import uvicorn
from typing import Callable, Dict, Any, Awaitable, Union, List, Optional, BinaryIO
import requests
from aiogram import Bot, F, Router, Dispatcher
from aiogram.filters import Command, BaseFilter
import asyncio
import io
from aiogram.types import (
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    MenuButtonCommands,
    Message,
    WebAppInfo,
    BotCommand,
    MessageEntity,
    Update,
    


)
from aiogram.types.callback_query import CallbackQuery
from aiogram.filters.text import Text
from aiogram.methods.copy_message import CopyMessage
from aiogram.methods.delete_message import DeleteMessage
from aiogram.methods.get_file import GetFile


from aiogram.types.bot_command_scope_all_chat_administrators import BotCommandScopeAllChatAdministrators
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, KeyboardBuilder
from app.settings import settings
from service import (scan_all_channals,
    scan_messages, send_messages, send_message_uan, run_client, save_data_channel, upload_image_in_telegraph,
    inicialisiren_bot, is_channel_managet, read_fileBot, has_channel, find_words, file_info
)
from aiogram import flags, html
from aiogram.dispatcher.flags import get_flag


bot_post = Bot(settings.TELEBOT_BOT_TOKEN)
#form_router = Router()
#dp = Dispatcher()
#dp.include_router(form_router)
#print(ACCESS_ID)

_dispatcher=Dispatcher()
mp_router = Router()
m_router = Router()

_dispatcher.include_router( mp_router)
mp_router.include_router(m_router)

base_url="https://tbf-b1-editor.onrender.com/shop-online/"
#************************************
Ch_id=0
List_data_channel_admin=[]
List_data_channel_source=[]
Curent_Channal={}
Create_message_id=[]
Mode_select_channel_admin=False

def cur_channal_admin(value: Optional[int]=None) -> Union[dict, None]:
    if value == None:
        return List_data_channel_admin[0]
    for item in List_data_channel_admin:
        if int(item["id_channel"]) == int(value):
            curent_channal=item
            return curent_channal
    #return None

async def restart(messs):
    await command_start(messs)


#************************************************

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, input_text_message_content
from aiogram.methods.get_chat_administrators import GetChatAdministrators
from aiogram.types.input_text_message_content import InputTextMessageContent



class SomeMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        data_time = get_flag(data, "data_time")
        global Ch_id
        Ch_id=data["event_update"].message.chat.id
        global List_data_channel_admin
        List_data_channel_admin= inicialisiren_bot(Ch_id, True)
        #if data["event_update"].message.photo != None:
            #print(92, Ch_id)
        global Curent_Channal
        #Curent_Channal= List_data_channel_admin[0]

        # chat_id_as_post1: Union[List, None] = data["event_update"].message.forward_from_chat
        # if chat_id_as_post1 is not None:
        #     chat_id_as_post="@" + chat_id_as_post1.title #for item in chat_id_as_post:
        #     try:
        #         result = await bot_post.get_chat_administrators(chat_id_as_post)
        #         print(75, result[1].user.id, 7777, event.chat.id )
        #         if result[1].user.id == event.chat.id:

        #         #data["event_update"].message.forward_from_chat.type="channell"
        #     except Exception as e:
        #print(84, data)
        # # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ñ–ª–∞–≥–∞ –Ω–∞ —Ö—ç–Ω–¥–ª–µ—Ä–µ –Ω–µ—Ç
        # # if not :
        #     return await handler(event, data)
        # #f_channal()
        #     print(61, data_time)# data["channal_"]
        # # event.forward_from_chat.type="channel_managet"
        return await handler(event, data)

m_router.message.middleware(SomeMiddleware())

#****************************************************
class SomeRouterPostMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        print("–ü–æ–ª—É—á–∏–ª ---- POST")
        
        return await handler(event, data)

mp_router.channel_post.outer_middleware(SomeRouterPostMiddleware())
#****************************************************

class HasAdminStatusFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        # –ï—Å–ª–∏ entities –≤–æ–æ–±—â–µ –Ω–µ—Ç, –≤–µ—Ä–Ω—ë—Ç—Å—è None,
        # –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        chat = message.chat or []
        chat_as_post1=message.forward_from_chat or []
        if (chat_as_post1 != None) & (Mode_select_channel_admin == True):
            chat_id_as_post="@" + chat_as_post1.username if chat_as_post1.username != "" else "@" + chat_as_post1.title #for item in chat_id_as_post:
            try:
                result = await bot_post.get_chat_administrators(chat_id_as_post)
                for item in result:
                    if item.user.id == chat.id: ##–≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ —è–≤–ª. –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞(–≥—Ä—É–ø–ø—ã –º–µ–≥–∞–≥—Ä—É–ø–ø—ã)
                        #print(75, item.user, chat.id, 7777 )

                        return True

            except Exception as e:
                print(70, e, chat_id_as_post)

                return False
            return False

# class HasInputTextFilter(BaseFilter):
#     async def __call__(self, message: Message) -> bool:

#****************************************************
def get_list_button(key: str) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ db(json)"""
    list_b=get_message(key)[1].split('=')
    list_button=[l.split("'")[1] for l in list_b if l.count("'") > 0]
    return list_button

#****************************************************

@m_router.message(Command(commands=["start"]))
async def command_start(message: Message, base_url: str = base_url):
    await bot_post.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonCommands(type="commands"),# "–ú–µ–Ω—é\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newdraft     –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–æ–π –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å  –Ω–æ–≤—ã –ø–æ—Å—Ç\n–ú–µ–Ω—é\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newdraft     –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–æ–π –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã –ø–æ—Å—Ç\n/newpost     –°–æ–∑–¥–∞—Ç—å  –Ω–æ–≤—ã –ø–æ—Å—Ç\n"
    )
    #print(message)
    _command1: BotCommand = None
    _commands1: list = []
    _commands1 = [{"command": "repost_plus", "description": "–∫–æ–º–∞–Ω–¥–∞ –∫–ª–∞–Ω–∏—Ä—É—é—â–∞—è –ø–æ—Å—Ç"},
    {"command": "addchannel", "description": "–ø–æ–¥–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"},
    {"command": "newpost", "description": " —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"},
    {"command": "editpost", "description": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"},
    {"command": "draftpost", "description": "—Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞"},
    {"command": "notes", "description": "–∑–∞–º–µ—Ç–∫–∏"},
    {"command": "settings", "description": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"},
    {"command": "statistic", "description": "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
    {"command": "help", "description": "–ø–æ–º–æ—â—å"},
    {"command": "start", "description": "—Ä–µ—Å—Ç–∞—Ä—Ç"}]
    await bot_post.set_my_commands(_commands1)
    global Ch_id
    Ch_id=message.chat.id
    global List_data_channel_admin
    if List_data_channel_admin == []:
        List_data_channel_admin=inicialisiren_bot(message.chat.id, True)
    global Curent_Channal
    print(169, Curent_Channal, List_data_channel_admin)
    Curent_Channal= {}
    #print(89, List_data_channel_admin)
    await message.answer("""–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π Notepost-–±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫:\n\n

‚Äî ChatGPT –ø–æ–º–æ–∂–µ—Ç –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ üî•\n
‚Äî —à–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç –∫–Ω–æ–ø–∫–∏, —Ä–µ–∞–∫—Ü–∏–∏ –∏ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫\n
‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É—é—Ç –ø–æ—Å—Ç—ã –±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ –∫–ª–∏–∫–∞\n
‚Äî —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n
‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ—Ç –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n
‚Äî NEW: –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ "—Ä–µ–ø–æ—Å—Ç+" üî•, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –ª—é–±–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É:\n

/addchannel ‚Äì –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª\n
/addgroup ‚Äì –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞\n
/repost_plus - –∫–æ–º–∞–Ω–¥–∞ –∫–ª–∞–Ω–∏—Ä—É—é—â–∞—è –ø–æ—Å—Ç\n
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ:\n

/help ‚Äì –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞""",
        reply_markup=get_reply_keyboard()

     )
    await message.answer("` üë®‚Äçüéì   –£—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É!!!   üë®‚Äçüéì `",

        reply_markup= InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'Continue_start')],
        ])
        
        )

@m_router.callback_query(Text(startswith="Continue_"))
async def send_value2(callback: CallbackQuery):
    sufix = callback.data.split("_")[1]
    global List_data_channel_admin
    global Mode_select_channel_admin
    if List_data_channel_admin == []:
        List_data_channel_admin= inicialisiren_bot(callback.message.chat.id, True)
    print(235, List_data_channel_admin)

    curent_channel= [] #[curent_channel1: str, curent_channel2: str, curent_channel3: str]
    for n in range(len(List_data_channel_admin)):
        curent_channel.append("\n@" + str(List_data_channel_admin[n]["username_channel"]))
    b=curent_channel[1] if len(curent_channel) > 1 else ''
    c=curent_channel[2] if len(curent_channel) > 2 else ''
    #if List_data_channel_admin != []:
    # curent_channel1=List_data_channel_admin[n]["username_channel"] or ""
    # curent_channel2=List_data_channel_admin[len(List_data_channel_admin)-2]["username_channel"] if len(List_data_channel_admin) > 1 else ""
    # curent_channel3=List_data_channel_admin[len(List_data_channel_admin)-1]["username_channel"] if len(List_data_channel_admin) > 2 else ""

    if sufix == "start":
        #print(206, (curent_channel["username_channel"] == ""))
        if curent_channel[0] == "\n@":
            await callback.message.answer(
                """ __--__\n\n–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n\n
                –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞:\n\n
                1. –î–æ–±–∞–≤—å—Ç–µ @cripto_fack_new_bot –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n
                2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å @username –∏–ª–∏ Group ID) """,
                #show_alert=True
            )
            Mode_select_channel_admin=True
            return
        await callback.message.answer(
            f"""–£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:{curent_channel[0]}{b}{c}\n –æ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. 
                """,
            reply_markup=get_inline_keyboard2() ,

                )

    await callback.answer()
#********************************************************************

def get_reply_keyboard():
    reply_markup_buttons=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ó–∞–º–µ—Ç–∫–∏"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        one_time_keyboard=False, resize_keyboard=True,
    )
    return reply_markup_buttons

def get_inline_keyboard2(curent_channel_id: Optional[str] = ""):
    buttons =[
        [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data=f'post-create_create_{curent_channel_id}')],#_{message_channel_id}')],
        [InlineKeyboardButton(text='–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'repost_clone_{curent_channel_id}')], 
        [InlineKeyboardButton(text='–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ', callback_data=b'scheduled'), InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=b'edit')], 
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, one_time_keyboard=False)
    return keyboard


def get_inline_keyboard(curent_channel_id: Optional[str] = ""):
    buttons =[
            [InlineKeyboardButton(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª", callback_data=f"repost_media_{curent_channel_id}")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="repost_plus"),
            InlineKeyboardButton(text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="PPP")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏", callback_data="Edit")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏", callback_data="Edit")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"repost_delete_{curent_channel_id}"),
            InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"repost_continue_{curent_channel_id}")]
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
def get_inline_keyboard0(curent_channel_id: Optional[str] = ""):
    buttons =[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"repost_delete_{curent_channel_id}"),
            InlineKeyboardButton(text="üî• –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"repost_Send_{curent_channel_id}")]
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

#********************************************************************

@m_router.message(((F.text == "addchannel_") | (F.Command == "addchannel"))) #(Command(commands=["addchannel"]))
async def command_addchannel(message: Message):
    #list_channel=read_fileBot()
    global Mode_select_channel_admin
    Mode_select_channel_admin=True
    await message.answer(
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞:\n\n

1. –î–æ–±–∞–≤—å—Ç–µ @cripto_fack_new_bot –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n
2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å @username –∏–ª–∏ Group ID)""",  ##(https://telegra.ph/How-to-add-a-chat-Controller-FAQ-10-12)
    )

#@flags.data_time(event1=True)
@m_router.message(F.forward_from_chat.type == "channel", HasAdminStatusFilter())#, F.forward_from_chat.as_("channel_managet"))  # Echo to all messages except messages via bot
async def forward_mess(message: Message):#, channel_managet):
    #print(channel_managet)
    global List_data_channel_admin #= inicialisiren_bot(message.chat.id, True)
    #print(299, message)
    if is_channel_managet(message.chat.id, message.forward_from_chat.username):
        await message.answer(
       f"""–Ø —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n
            –¢–µ–ø–µ—Ä—å –º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ\n\n–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n
    –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–∞–∂–µ
     —Å—Ç–∏–∫–µ—Ä—ã.\n\nA —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–ª—à–µ–±–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π /repost_plus
""",
        reply_markup=get_inline_keyboard2() ,
               # reply_markup=InlineKeyboardMarkup(
        #     inline_keyboard=[
        #         [InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç+", callback_data="repost_plus")]
        #     ]
        # ),
        )
    else:
        #print(message.forward_from_chat.username)
        data_channel_admin_new={}
        data_channel_admin_new["username_channel"]=message.forward_from_chat.username
        data_channel_admin_new["id_channel"]=message.forward_from_chat.id
        data_channel_admin_new["chat_id"] =message.chat.id
        data_channel_admin_new["is_managet"] =True
        # global Curent_Channal
        # if List_data_channel_admin[0]["chat_id"] == 0:
        #     List_data_channel_admin[0]=data_channel_admin_new
        # #Curent_Channal=data_channel_admin_new
        List_data_channel_admin.append(data_channel_admin_new)
        res = save_data_channel(data_channel_admin_new)
        #res = save_data_channel(data_channel) if save_data_channel(data_channel) else print("net")
        await message.answer(
            f"""–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–Ω–∞–ª ¬´{message.forward_from_chat.title}¬ª @{message.forward_from_chat.username} –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. 
            –∏\n–º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ\n\n–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n
    –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–∞–∂–µ
     —Å—Ç–∏–∫–µ—Ä—ã.\n\nA —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–ª—à–µ–±–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π /repost_plus""",

            reply_markup=get_inline_keyboard2(),

        )



@m_router.callback_query(Text(startswith="repost_"))
async def run_repost_plus(callback: CallbackQuery):
    sufix_full=callback.data.split("_")
    sufix = callback.data.split("_")[1]
    #Curent_channel=has_channel(Ch_id, id_channel=sufix_full[2] if sufix_full[2] != None else None)
    #cur_channal_admin(Curent_channel)
    global List_data_channel_admin
    if List_data_channel_admin == []:
        List_data_channel_admin= inicialisiren_bot(callback.message.chat.id, True)
    asu=dict(create_mess_id=callback.message.message_id)

    global Curent_Channal
    curent_channel_id=sufix_full[2] if sufix_full[2] != "" else ""
    if (Curent_Channal == {}) & (curent_channel_id != ""):
        Curent_Channal.update(cur_channal_admin(curent_channel_id))
        Curent_Channal.update(asu)
    #(319, Curent_Channal, sufix_full[2], Ch_id)
    username_channel=[]
    id_channel=[]
    button=[]
    if (sufix == "clone") & (curent_channel_id == ""):
        #List_data_channel_admin=inicialisiren_bot(message.chat.id, True)
        for n in range(len(List_data_channel_admin)):
            username_channel.append(List_data_channel_admin[n]["username_channel"])
            id_channel.append(List_data_channel_admin[n]["id_channel"])
            button.append(InlineKeyboardButton(text=username_channel[n], callback_data=f"repost_create_{id_channel[n]}"))

        #(388, List_data_channel_admin, id_channel, callback.data)
        await callback.message.answer(
            "–≤—ã–±–∏—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
           reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[button]
            ),
                )
        return
    elif (sufix == "edit") & (curent_channel_id != ""):
        await callback.message.answer(
                f"""
                –ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ"""
            )
        # await callback.message.edit_text(" ",
        #     inline_message_id = callback.message.message_id-2)


    elif (sufix == "clone") & (curent_channel_id != ""):
        #global Curent_Channal
        # Curent_Channal=cur_channal_admin(curent_channel_id)
        # print(384, curent_channel_id, Curent_Channal)
        await callback.message.answer(
                f"""
                –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞–Ω–µ–≤—Ä–∞,\n –ø–µ—Ä–µ–π–¥—è –≤ –∫–∞–Ω–∞–ª –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,\n
  –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –ø–µ—Ä–µ—Å–ª–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ—ë –∏–º—è -\n\n "Cripto-fack" (@cripto_fack_new_bot) –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –ø–æ—Å—Ç."""
            )
    elif (sufix == "create") & (curent_channel_id != ""):
        # Curent_Channal=cur_channal_admin(curent_channel_id)
        await callback.message.answer(
                f"""
        –º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ\n\n–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n
    –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–∞–∂–µ
     —Å—Ç–∏–∫–µ—Ä—ã.""",
        )
    elif (sufix == "delete") & (curent_channel_id != ""):
        await callback.message.answer(
                f"""
        –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç?\n
        """,
        reply_markup= InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ', callback_data=f'repost_okdelete_{curent_channel_id}')],
        ])
        )
    elif (sufix == "okdelete") & (sufix_full[2] != None):
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-3 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-2 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-1 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id )

        await callback.message.answer(
            f""" ` _ _ ~ –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. ~ _ _ `
                """,
            reply_markup=get_inline_keyboard2() ,

                )
    elif (sufix == "Send") & (curent_channel_id != None):
        #curent_chat_id = callback.data.split("_")[1]
        await callback.message.copy_to(curent_channel_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
        await callback.message.answer(
            text="~ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! ~",
            #show_alert=True
            reply_markup= InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'Continue_start_{curent_channel_id}')], 
            ])
        )
        Curent_Channal={}

    elif (sufix == "media") & (curent_channel_id != None):
        await callback.message.answer(
            text="–í—ã—à–ª–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª",
            #show_alert=True
        )

    await callback.answer()
#**********************************************************************************************
@m_router.message(Command(commands=["repost_plus"]))  # Echo to all messages except messages via bot
async def run_repost_plus(message: Message):
    List_data_channel_source= inicialisiren_bot(message.chat.id, False)
    #(266, List_data_channel_source)
    username_channel=[]
    chat_id=[]
    List_data_channel_admin=inicialisiren_bot(message.chat.id, True)
    for n in List_data_channel_admin:
        username_channel.append(n["username_channel"])
        chat_id.append(n["chat_id"])
    #(username_channel, chat_id)
    await message.answer(
        "–≤—ã–±–∏—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
       reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=str(username_channel[0]), callback_data=f"repost_{chat_id[0]}_{chat_id[0]}"),
                InlineKeyboardButton(text="username_channel", callback_data=f"repost_{chat_id[0]}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="repost_back")]
            ]
        ),
            )

#**********************************************–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –∫–ª–æ–Ω–µ******************************



from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest

@m_router.message(F.forward_from_chat.type == "channel")#, flags={"data_time": {"event": True}})  # Echo to all messages except messages via bot
async def forward_mess_clone(message: Message, base_url: str=base_url):
    List_data_channel_source= inicialisiren_bot(message.chat.id, False)
    #(474, message)
    for item in List_data_channel_source:
        try:
            if int(item["id_channel"]) != message.forward_from_chat.id:
                data_channel_source_new["username_channel"]=message.forward_from_chat.username
                data_channel_source_new["id_channel"]=message.forward_from_chat.id
                data_channel_source_new["chat_id"] =message.chat.id
                data_channel_source_new["is_managet"] =False
                List_data_channel_source.append(data_channel_source_new)
                res = save_data_channel(data_channel_source_new)
            #data_curent_channel=item
        except Exception as e:
            print(e)
    mess=message.text
    mess_channal=message.forward_from_chat
    mess_entity=message.entities
    #print(442, message, 119988 )
    forward_mess_id=message.message_id #message.forward_from_message_id-1
    await message.answer(
    f"""–Ø –ø–æ–ª—É—á–∏–ª –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @{mess_channal.username}.
    """)
    global Curent_Channal
    curent_channel=Curent_Channal
    if (message.photo == None) & (message.animation == None):
        id_channel='@' + curent_channel["username_channel"]
        id_channel_source=message.chat.id #'@' + data_curent_channel["username_channel"]
        sim=find_words(str(mess), "@")
        sim1 = sim[0] if sim != [""] else ""
        #print(sim1, message.photo,33333 , message.caption)
        mess = str(mess).replace(str(sim1), "").replace("|", '')

        await message.answer(text=mess, entities=mess_entity, reply_markup=get_inline_keyboard0(curent_channel["id_channel"]))
    elif message.photo != None :
        #await show_summary(message=message, data=[id_channel, id_channel_source, forward_mess_id])
        with suppress(TelegramBadRequest):
            await message.answer_photo(message.photo[-1].file_id, caption=message.caption, caption_entities=message.caption_entities, reply_markup=get_inline_keyboard0(curent_channel["id_channel"]))

    elif message.animation != None :
        with suppress(TelegramBadRequest):
            await message.answer_animation(message.animation.file_id, caption=message.caption, caption_entities=message.caption_entities, reply_markup=get_inline_keyboard0(curent_channel["id_channel"]))


#********************************************************************

async def show_summary(message: Message, data: List) -> None:
    try:
        #mess = " \n" + str(message.text).replace(find_words(message.text, "@")[0], "")
        message1= await message.send_copy(data[0])

        await message.answer(text="mess ok",
                #entities = message.entities,
        reply_markup=get_inline_keyboard()
        )
    except Exception as e:
        print(e)
    # async def my_middleware(handler, event, data):
    # typing = get_flag(data, "typing")  # Check that handler marked with `typing` flag
    # if not typing:
    #     return await handler(event, data)

    # async with ChatActionSender.typing(chat_id=event.chat.id):
    #     return await handler(event, data)


#*******************************************–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ creat**************
def get_inline_keyboard_creat(curent_channel_id: Optional[str] = ""):
    buttons =[
            [InlineKeyboardButton(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª", callback_data=f"post-create_media_{curent_channel_id}")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="post-create_plus"),
            InlineKeyboardButton(text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="PPP")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏", callback_data="Edit")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏", callback_data="Edit")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"post-create_delete_{curent_channel_id}"),
            InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"post-create_continue_{curent_channel_id}")]
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_inline_keyboard3(curent_channel_id: Optional[str] = ""):
    buttons =[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post-create_delete_{curent_channel_id}")],
            [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post-create_Send_{curent_channel_id}"),
            InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å", callback_data="Edit")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"Continue_start_{curent_channel_id}")]
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
#******************************************Calback******
@m_router.callback_query(Text(startswith="post-create_"))
async def run_create(callback: CallbackQuery):
    sufix_full=callback.data.split("_")
    sufix = callback.data.split("_")[1]

    global List_data_channel_admin
    if List_data_channel_admin == []:
        List_data_channel_admin= inicialisiren_bot(callback.message.chat.id, True)
    asu=dict(create_mess_id=callback.message.message_id)

    global Curent_Channal
    curent_channel_id=sufix_full[2] if sufix_full[2] != "" else ""
    if (Curent_Channal == {}) & (curent_channel_id != ""):
        #if Curent_Channal["id_channel"] != curent_channel_id:
        Curent_Channal.update(cur_channal_admin(curent_channel_id))
        Curent_Channal.update(asu)
    #print(646, Curent_Channal, sufix_full[2])
    username_channel=[]
    id_channel=[]
    button=[]
    if (sufix == "create") & (curent_channel_id == ""):
        #List_data_channel_admin=inicialisiren_bot(message.chat.id, True)
        for n in range(len(List_data_channel_admin)):
            username_channel.append(List_data_channel_admin[n]["username_channel"])
            id_channel.append(List_data_channel_admin[n]["id_channel"])
            button.append(InlineKeyboardButton(text=username_channel[n], callback_data=f"post-create_create_{id_channel[n]}"))

        #print(654, List_data_channel_admin, id_channel, callback.data)
        await callback.message.answer(
            "–≤—ã–±–∏—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
           reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[button]
            ),
                )
        return
    elif (sufix == "media") & (curent_channel_id != None):
        #Curent_Channal=cur_channal_admin(curent_channel_id)
        await callback.message.answer(
            text=f"–í—ã—à–ª–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª {callback.message.message_id}",
            #show_alert=True
        )
    elif (sufix == "edit") & (curent_channel_id != ""):
        await callback.message.answer(
                f"""
                –ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ{callback.message.message_id}"""
            )
        # await callback.message.edit_text(" ",
        #     inline_message_id = callback.message.message_id-2)

    elif (sufix == "create") & (curent_channel_id != ""):
        #Curent_Channal=cur_channal_admin(curent_channel_id)
        await callback.message.answer(
                f"""
        –º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ\n\n–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n
    –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–∞–∂–µ
     —Å—Ç–∏–∫–µ—Ä—ã.{callback.message.message_id}""",
        )

    elif (sufix == "delete") & (curent_channel_id != ""):
        await callback.message.answer(
                f"""
        –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç?\n
        """,
        reply_markup= InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ', callback_data=f'repost_okdelete_{curent_channel_id}')],
        ])
        )
    elif (sufix == "okdelete") & (sufix_full[2] != None):
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-4 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-3 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-2 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-1 )
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id )

        await callback.message.answer(
            f""" ` _ _ ~ –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. ~ _ _ `
                """,
            reply_markup=get_inline_keyboard2() ,

                )
    elif (sufix == "continue") & (curent_channel_id != ""):
        #print(message.message_id)
        await callback.message.answer(
                f"""
        –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {Curent_Channal["username_channel"]}\n@{Curent_Channal["username_channel"]}
        """
                )
        await bot_post.copy_message(callback.message.chat.id, callback.message.chat.id, callback.message.message_id-1, reply_markup=get_inline_keyboard3(curent_channel_id))
        await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-2 )
        #await bot_post.delete_message(callback.message.chat.id, callback.message.message_id )
        await callback.answer()


    elif (sufix == "Send") & (curent_channel_id != None):
        #curent_chat_id = callback.data.split("_")[1]
        #print(693, curent_channel_id, callback.message.message_id)
        await callback.message.copy_to(curent_channel_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
        await callback.message.answer(
            text="~ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! ~",
            #show_alert=True
            reply_markup= InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'Continue_start_{curent_channel_id}')], 
            ])
        )
        Curent_Channal={}
        #print(699,Curent_Channal, curent_channel_id)




##**********************************–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# @m_router.message(F.message)  # Echo to all messages except messages via bot
# async def echo_all(message: Message, base_url: str=base_url):
#     print(582,message.text, 777, Ch_id)

# @m_router.callback_query()
# async def hengler_post(callback: CallbackQuery):
#     await callback.answer(
#         "–ü–æ–ª—É—á–∏–ª ---- callback_query",
#         show_alert=True
#     )

@m_router.message(~F.message & ((F.text != "–ù–∞—Å—Ç—Ä–æ–π–∫–∏") & (F.text != "–ó–∞–º–µ—Ç–∫–∏") & (F.text != "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω") & (F.text != "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")))  # Echo to all messages except messages via bot
async def echo_all(message: Message):
    global Curent_Channal
    global Create_message_id
    global message2
    #*********************************************************************
    data = {
        "url": "<N/A>",
        "email": "<N/A>",
        "code": "<N/A>"
    }
    entities1 = message.entities or []
    for item in entities1:
        if item.url != None:
            data[item.url] = item.extract_from(message.text)
    #**********************************************************

    #print(538,Curent_Channal, 999, data)
    # await message.edit_text(" ",
    #     inline_message_id = message.message_id)
    if message.text != None :
        Create_message_id.append(str(message.message_id))
        #Create_message_id.append(message.text)
        message2 = message #await message.send_copy(Ch_id)
        print("–ø—Ä–∏–ª–µ—Ç–µ–ª–æ —Å—é–¥–∞", message.message_id)
        #await bot_post.delete_message(Ch_id, message.message_id-1 )

        await message.answer(
            message.text,
            reply_markup=get_inline_keyboard_creat(Curent_Channal["id_channel"])
        )

    elif (message.photo != None) & (message.text == None):
        #await show_summary(message=message, data=[id_channel, id_channel_source, forward_mess_id])
        #with suppress(TelegramBadRequest):
        #await bot_post.copy_message(Ch_id)
        #message2: Message =await message.send_copy(Ch_id)
        new_text=f"{message.message_id}" + str(message2.text)
        file_io: BinaryIO = await bot_post.download(message.photo[-2].file_id)
        url_link_image=upload_image_in_telegraph(file_io)
        #print(697, message.message_id, ) #/file/25b93f3a42027f16c107f.jpg

        entities= [MessageEntity(type='text_link', offset=0, length=1, url=f"https://telegra.ph{url_link_image}", user=None, language=None, custom_emoji_id=None)] #MessageEntity(type='bold', offset=2, length=53, url=None, user=None, language=None, custom_emoji_id=None), MessageEntity(type='italic', offset=320, length=5, url=None, us f'https://telegra.ph/file/{message.photo[-1].file_id}9f0d8.png', user=None, language=None, custom_emoji_id=None)

        await message.answer(text=new_text, entities=entities, disable_web_page_preview=False, reply_markup=get_inline_keyboard_creat(Curent_Channal["id_channel"]))
        #await message.answer(text=Create_message_id[1], photo= message.photo[-1].file_id, caption=message.caption, caption_entities=message.caption_entities, reply_markup=get_inline_keyboard(Create_message_id[0]))

    elif message.animation != None :
        # with suppress(TelegramBadRequest):
        await message.answer_animation(message.animation.file_id, caption=message.caption, caption_entities=message.caption_entities, reply_markup=get_inline_keyboard(Curent_Channal["id_channel"]))
    elif (message.text != None) & (message.entities.url != None):

        #print(756, Curent_Channal["Create_message_id"], message.message_id)
        await bot_post.delete_message(chat.id, message.message_id-1 )

        await message.answer(
            message.text,
            reply_markup=get_inline_keyboard_creat(Curent_Channal["id_channel"])
        )



    # await message.answer(
    #     "–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç,\n—Ç. –∫. –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
    #     reply_markup= InlineKeyboardMarkup(inline_keyboard=[
    #     [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'Continue_start')], 
    #     ])
    # )

#**************************************************************************
@m_router.message(((F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏") | (F.Command == "settings"))) #(commands=["settings"])))  
async def handler_settings(message: Message, base_url: str=base_url):
    k_id=await bot_post.get_me()
    #result: List[Union[ChatMemberOwner, ChatMemberAdministrator, ChatMemberMember, ChatMemberRestricted, ChatMemberLeft, ChatMemberBanned]] = await bot_post.get_chat_administrators("1849731160")
    await message.answer(
       f"""–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ,\n–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É
/help\n\u200b """,
        # reply_markup=InlineKeyboardMarkup(
        # inline_keyboard=[[InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å—Ç"), InlineKeyboardButton(text="–ø–ª–∞–Ω")],
        # [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç"), InlineKeyboardButton(text="–°—Ç–∞—Ç–∏–∫–∞")],
        #  [InlineKeyboardButton(text="–ó–∞–µ—Ç–∏"), InlineKeyboardButton(text="–ù–∞—Å—Ç–∫–∏")]],
        #  ),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
            [InlineKeyboardButton(text='–ú–æ–∏ –∫–∞–Ω–∞–ª—ã', callback_data=f'settings_mychannels_'), 
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data=f'settings_addchannel_')], 

            [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'Continue_start_')], 
            ]
        ),
    )

@m_router.callback_query(Text(startswith="settings_"))
async def run_settings(callback: CallbackQuery):
    sufix_full=callback.data.split("_")
    sufix = callback.data.split("_")[1]
    #Curent_channel=has_channel(Ch_id, id_channel=sufix_full[2] if sufix_full[2] != None else None)
    #cur_channal_admin(Curent_channel)
    global List_data_channel_admin
    if List_data_channel_admin == []:
        List_data_channel_admin= inicialisiren_bot(callback.message.chat.id, True)
    #     return
    global Curent_Channal
    curent_channel_id=sufix_full[2] if sufix_full[2] != "" else ""
    #print(802, Curent_Channal, sufix_full[2], Ch_id)
    username_channel=[]
    id_channel=[]
    if ((sufix == "clone") & (curent_channel_id == "")) | ((sufix == "create") & (curent_channel_id == "")):
        return
    elif sufix == "settings":
        await handler_settings(callback.message) 
    elif (sufix == "addchannel"):
        #idm=await bot_post.send_message(Ch_id, "addchannel_")
        # await idm.forward(Ch_id)
        # await bot_post.delete_message(callback.message.chat.id, callback.message.message_id-2 )
        await command_addchannel(callback.message)
        #await callback.message.answer()
    elif (sufix == "mychannels"):

        curent_channel1=List_data_channel_admin[0]["username_channel"] or ""
        curent_channel2=List_data_channel_admin[len(List_data_channel_admin)-2]["username_channel"] if len(List_data_channel_admin) > 1 else ""
        curent_channel3=List_data_channel_admin[len(List_data_channel_admin)-1]["username_channel"] if len(List_data_channel_admin) > 2 else ""
        await callback.message.answer(
            f"""–£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã: @{curent_channel1},\n@{curent_channel2},\n@{curent_channel3},\n –æ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. 
                """,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
            [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data= "settings_settings_" )], 
            ]
        ),
                )

#***********************************************

# app = FastAPI(title=settings.APP_TITLE)

# @app.on_event("startup")
# async def startup():
#     try:
#         useful_updates = _dispatcher.resolve_used_update_types()
#             # –î–∞, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª–ª–∏–Ω–≥
#         await _dispatcher.start_polling(bot_post, allowed_updates=useful_updates)
#     except Exception as e:
#         raise e

# @app.on_event("shutdown")
# async def shutdown():
# #    await db.disconnect()
#     await bot.session.close()

async def run_bot2_backgraund():
    useful_updates = _dispatcher.resolve_used_update_types()
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
#     # –î–∞, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª–ª–∏–Ω–≥
#     #await bot_post.delete_webhook(drop_pending_updates=True)
    await _dispatcher.start_polling(bot_post, allowed_updates=useful_updates)
#run_bot2_backgraund()
#6157538942:AAH9jbktrh2HabWQdrqxAvS7QTwQ3NV2NCU

if __name__ == '__main__':
    # uvicorn.run(
    #     app="main:app",
    #     host=settings.ALLOWED_HOST,
    #     debug=settings.DEBUG,
    #     port=settings.ALLOWED_PORT,
    #     reload=True,
    #     #log_level=logging.INFO,
    #     use_colors=True,
    # )

#***********************************************************
    asyncio.run(run_bot2_backgraund())
